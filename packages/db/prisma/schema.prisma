
// packages/db/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.pnpm/@prisma+client@latest/node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// Models
// =====================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      String   @default("user")
  createdAt DateTime @default(now())
  orders    Order[]
}

model Order {
  id        String   @id @default(cuid())
  service   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  data      Json
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model StarsExchange {
  id           String   @id @default(cuid())
  telegramId   String
  username     String?
  starsAmount  Int
  payoutType   String   // 'TON' | 'USDT_TRC20' | 'IRR' | 'EUR'
  payoutInfo   String   // wallet address or IBAN
  status       String   // 'pending' | 'verified' | 'paid' | 'failed'
  reference    String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserWallet {
  id          String   @id @default(cuid())
  telegramId  String   @unique
  username    String?
  tonAddress  String?
  usdtAddress String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model VirtualCardRequest {
  id                   String   @id @default(cuid())
  userId               String   // From Clerk or Telegram mapping
  fullName             String
  email                String
  phoneNumber          String
  country              String

  cardCurrency         CardCurrency
  cardType             String?  // e.g. "personal", "business"
  fundingAmount        Decimal  @db.Decimal(10, 2)
  fundingMethod        String   // e.g. "USDT", "balance", "bank"
  cardLabel            String?  // Optional UX label

  billingAddress       String?
  postalCode           String?

  paymentSourceType    String   // "wallet", "crypto_tx", etc.
  paymentSource        String   // TXID or wallet_id
  proofOfPaymentUrl    String?  // If uploaded manually

  isFirstCard          Boolean  @default(false)
  expectedMonthlySpend Decimal? @db.Decimal(10, 2)
  industryOrUseCase    String?

  status               CardRequestStatus @default(PENDING)
  cardProviderId       String?
  adminNotes           String?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  deletedAt            DateTime?

  @@index([userId])
}

// =====================
// Enums
// =====================

enum CardRequestStatus {
  PENDING
  REVIEW
  APPROVED
  ISSUED
  FAILED
  CANCELED
}

enum CardCurrency {
  USD
  EUR
  GBP
  // Extend as needed
}

model NotifyLead {
  id        String   @id @default(cuid())
  email     String
  phone     String?
  platform  String   // 'trading' or 'education'
  createdAt DateTime @default(now())
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  currency  Currency
  balance   Decimal  @default(0)
  locked    Decimal  @default(0)
  transactions Transaction[]
}

model Transaction {
  id        String     @id @default(uuid())
  walletId  String
  wallet    Wallet     @relation(fields: [walletId], references: [id])
  type      TransactionType
  amount    Decimal
  ref       String
  timestamp DateTime   @default(now())
  note      String?
}

enum Currency {
  USD
  USDT
  BTC
}

enum TransactionType {
  TOPUP
  ORDER_SERVICE
  WITHDRAWAL
  ADJUSTMENT
}
